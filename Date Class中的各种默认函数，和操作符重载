==============================================================.h文件===========================================================================================================
==============================================================.h文件===========================================================================================================
==============================================================.h文件===========================================================================================================
class Date

{

public:

// 获取某年某月的天数

int GetMonthDay(int year, int month);

  // 全缺省的构造函数

Date(int year = 1900, int month = 1, int day = 1);



  // 拷贝构造函数

// d2(d1)

Date(const Date& d);

   

  // 赋值运算符重载

// d2 = d3 -> d2.operator=(&d2, d3)

Date& operator=(const Date& d);



  // 析构函数

~Date();



  // 日期+=天数

Date& operator+=(int day);



  // 日期+天数

Date operator+(int day);



  // 日期-天数

Date operator-(int day);



   // 日期-=天数

Date& operator-=(int day);



  // 前置++

Date& operator++();



  // 后置++

Date operator++(int);



  // 后置--

Date operator--(int);



  // 前置--

Date& operator--();

  // >运算符重载

bool operator>(const Date& d);



  // ==运算符重载

bool operator==(const Date& d);



  // >=运算符重载

inline bool operator >= (const Date& d);

   

  // <运算符重载

bool operator < (const Date& d);



   // <=运算符重载

bool operator <= (const Date& d);



  // !=运算符重载

bool operator != (const Date& d);



  // 日期-日期 返回天数

int operator-(const Date& d);

private:

int _year;

int _month;

int _day;

};
  ==============================================================.cpp文件===========================================================================================================
==============================================================.cpp文件===========================================================================================================
==============================================================.cpp文件===========================================================================================================
#include"test.h"




// 获取某年某月的天数
int Date::GetMonthDay(int year, int month)
{
	int days[13] = {0,31,28,31,30,31,30,31,31,30,31,30,31};//此处28为默认平年;
	if (month==2&&((year % 4 == 0 && year % 100 != 0) || year % 400 == 0))//闰
	{
		return 29;
	}
	return days[month];
}


// 赋值运算符重载  (//赋值 和 初始化构造 有区别的哦)
Date& Date::operator=(const Date& d)//记住 隐含调用者的this指针的;
{
	_year = d._year;
	_month = d._month;
	_day = d._day;
	return *this;
}




// 日期+=天数 (+= 原日期变了)


Date& Date::operator+=(int day)//考虑全面  万能复用!!
{
	if (day < 0)


	{
		return *this -= -day;// -= 的复用
	}
	_day += day;
	while (_day > GetMonthDay(_year, _month))
	{
		_day -= GetMonthDay(_year, _month);
		_month++;
		if (_month == 13)//骚
		{
			_year++;
			_month = 1;
		}
	}
	return *this;
}




// 日期+天数 (原日期不变噢)


Date Date::operator+(int day)
{
	Date tmp = *this;
	return tmp+=day;//巧妙复用
}


// 日期-天数


Date Date::operator-(int day)
{
	Date tmp = *this;
	return tmp-=day;
}






// 日期-=天数


Date& Date::operator-=(int day)
{
	if (day < 0)
	{
		return *this+=-day;
	}
	//day > 0 
	_day -= day;//_day此时可以看错月份之间的gap


	while (_day <= 0)//恰好搞到0 进循环该算法也满足正确输出前一个月的满day！
	{
		_month--;
		if (_month == 0)
		{
			_year--;
			_month = 12;
		}
		_day += GetMonthDay(_year, _month);//刺客——day可能很负 就循环累+到》=0
	}
	return *this;
}
//
//
//
// 前置++(先加再用)


Date& Date::operator++()
{
	*this += 1;
	return *this;
}
//
//
//
// 后置++(先用再加)


Date Date::operator++(int)
{
	Date tmp = *this;
	*this += 1;
	return tmp;
}


//
//
// 后置--


Date Date::operator--(int)
{
	Date tmp = *this;
	*this -= 1;
	return tmp;
}






// 前置--


Date& Date::operator--()
{
	*this -= 1;
	return *this;
}
//
// >运算符重载


bool Date::operator>(const Date& d)
{
	if (_year > d._year) return true;
	else if (_year == d._year && _month > d._month) return true;
	else if (_year == d._year && _month == d._month && _day > d._day) return true;
	else return false;
}






// ==运算符重载


bool Date::operator==(const Date& d)
{
	return (_year == d._year && _month == d._month && _day == d._day);
}


//
//
//// >=运算符重载




//高效复用！
inline bool Date::operator >= (const Date& d)
{
	/*if (_year > d._year) return true;
	else if (_year == d._year && _month > d._month) return true;
	else if (_year == d._year && _month == d._month && _day > d._day) return true;
	else if(_year == d._year && _month == d._month && _day == d._day) return true;
	else return false;*/
	return *this > d || *this == d;
}


//
//
//
// <运算符重载


bool Date::operator < (const Date& d)
{
	/*if (_year < d._year) return true;
	else if (_year == d._year && _month < d._month) return true;
	else if (_year == d._year && _month == d._month && _day < d._day) return true;
	else return false;*/
	return !(*this>d||*this==d);
}
//
//
//	
// <=运算符重载


bool Date::operator <= (const Date& d)
{
	/*if (_year < d._year) return true;
	else if (_year == d._year && _month < d._month) return true;
	else if (_year == d._year && _month == d._month && _day < d._day) return true;
	else if (_year == d._year && _month == d._month && _day == d._day) return true;
	else return false;*/
	return !(*this > d);
}
//
//
//
// !=运算符重载


bool Date::operator != (const Date& d)
{
	/*return (_year != d._year || _month != d._month || _day != d._day);*/
	return !(*this==d);
}
//
//
//
// 日期-日期 返回天数


int Date::operator-(const Date& d)//两个日期谁大谁小都有可能哦 多想想前面能不能复用
{
	int flag = 1,days = 0;//days插值累上去;
	Date max = *this, min = d;
	if (*this < d)//特判
	{
		flag = -1; 
		min = *this;
		max = d;
	}


	while (min<max )
	{
		min = min + 1;
		days++;
	}


	
	return flag * days;
}
//

