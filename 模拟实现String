#include<iostream>
#include<assert.h>
using namespace std;
class String


{
	friend ostream& operator<<(ostream& _cout, const String& s);

	friend istream& operator>>(istream& _cin, String& s);

public:


	String(const char* str = "")
	{
		if (str == nullptr)
		{
			assert(false);
			return;
		}
		_str = new char[strlen(str) + 1];//多的1给'\0'腾位置;
		strcpy(_str, str);
		_capacity = strlen(str);
		_size = strlen(str);
	}

	String(const String& s)
		: _str(nullptr)//!不然后面自动调tmp的析构 就释放tmp的随机空间了 会报错！;
	{
		String tmp2(s._str);
	}



	~String()
	{
		if (_str)
		{
			delete[]_str;
			_str = nullptr;
		}

	}

	char& operator[](size_t pos)
	{
		assert(pos < _size);//实际_size 也能访问 就是'\0'
		return _str[pos];
	}
	const char& operator[](size_t pos) const
	{
		assert(pos < _size);//实际_size 也能访问 就是'\0'
		return _str[pos];
	}

	void reserve(size_t n)
	{
		if (_capacity < n)//得扩容了;
		{
			char* newstr = new char[n + 1];//+1 给'\0'腾位置;
			strcpy(newstr, _str);
			delete[] _str;
			_str = newstr;
			_capacity = n;
		}
	}

	void push_back(char ch)
	{
		if (_size >= _capacity)//扩容
		{
			size_t newcapacity = _capacity == 0 ? 4 : _capacity * 2;
			reserve(newcapacity);//这一步就会扩容_capacity;
		}
		_str[_size] = ch;
		_size++;
		_str[_size] = '\0';
	}

	void append(const char* str)
	{
		int len = strlen(str);
		if (_size + len > _capacity)//扩容
		{

			size_t newcapacity = _size + len;
			reserve(newcapacity);
		}
		strcat(_str, str);
		_size += len;
	}
	String& operator+=(char ch)
	{
		push_back(ch);
		return *this;
	}
	String& operator+=(const char* str)
	{
		append(str);
		return *this;
	}

	String& operator=(const String& s)
	{
		if (&s != this)//自己赋自己 没意义;
		{
			String tmp1(s);
			::swap(_str, tmp1._str);
		}
		return *this;

	}
	void swap(String& s)

	{

		::swap(_str, s._str);

		::swap(_size, s._size);

		::swap(_capacity, s._capacity);
	}

	void clear()
	{
		_str[0] = '\0';
		_size = _capacity = 0;
	}


	const char* c_str()const
	{
		return _str;
	}
	//输出成员
	size_t size()const
	{
		return _size;
	}

	size_t capacity()const

	{
		return _capacity;
	}

	bool empty()const
	{
		return _size == 0 ? true : false;
	}

	void resize(size_t n, char c = '\0')//调整大小 可以选择追加的字符;
	{
		if (n > _size)
		{
			if (n > _capacity)
			{
				reserve(n);
			}
			for (int i = _size; i < n; i++)
			{
				_str[i] = c;
			}
		}
		_size = n;
		//别忘了大哥'\0'
		_str[n] = '\0';
	}

	typedef char* iterator;
	// iterator

	iterator begin()
	{
		return _str;
	}

	iterator end()
	{
		return _str + _size;
	}
	//relational operators

	bool operator<(const String& s)//类似两个数组,两根指针那样归并的比;
	{
		int i = 0;
		int j = 0;
		while (i < _size && j < s._size)
		{
			if ((*this)[i] < s[j]) return true;
			else if ((*this)[i] > s[j]) return false;
			else
			{
				i++;
				j++;
			}
		}
		//abc abcd  ; abcd abc ;abcd abcd 看看极端情况;
		if (i == _size && j != s._size) return true;
		else return false;
	}
	bool operator==(const String& s)
	{
		if (_size != s._size) return false;

		int i = 0;
		int j = 0;
		while (i < _size && j < s._size)
		{
			if ((*this)[i] != s[j]) return false;
			else
			{
				i++;
				j++;
			}
		}
		return true;
	}
	//复用
	bool operator<=(const String& s)
	{
		return (*this < s) || (*this == s);
	}

	bool operator>(const String& s)
	{
		return !(*this < s) && !(*this == s);
	}

	bool operator>=(const String& s)
	{
		return !(*this < s);
	}

	bool operator!=(const String& s)
	{
		return !(*this == s);
	}

	// 返回c在string中第一次出现的位置pos

	size_t find(char c, size_t pos = 0) const
	{
		int i = pos;
		while (i < _size)
		{
			if (_str[i] == c) return i;
			else i++;
		}
		return -1;

	}

	// 返回子串s在string中第一次出现的位置 pos起始往后找;

	size_t find(const char* s, size_t pos = 0) const
	{
		int len = strlen(s);

		for (int i = pos; i <= _size - len; i++)
		{
			int k = 0;
			for (int j = i; j < i+len; j++)
			{
				if (_str[j] != s[k]) break;
				else k++;
			}
			if (k == len) return i;
		}
		return -1;
	}

	// 在pos位置上插入字符c/字符串str，并返回该字符的位置

	String& insert(size_t pos, char c)//a b c d
	{
		assert(pos<=_size);
		if (_size >= _capacity)//扩容
		{
			size_t newcapacity = _capacity == 0 ? 4 : _capacity * 2;
			reserve(newcapacity);
		}
		for (int i = _size; i > pos; i--)
		{
			_str[i] = _str[i-1];
		}
		_str[pos] = c;
		_size++;
		_str[_size] = '\0';
		return *this;
	}

	String& insert(size_t pos, const char* str)
	{
		int len = strlen(str);
		assert(pos <= _size);//位置合法性;
		if (_size+len>_capacity)//扩容
		{
			size_t newcapacity = _capacity == 0 ? len : _size+len;
			reserve(newcapacity);
		}
		for(int i = _size + len-1;i>= len+pos;i--)
		{
			_str[i] = _str[i-len];
		}
		for (int i = pos,k = 0; i < pos + len; i++)
		{
			_str[i] = str[k++];
		}
		_size += len;
		_str[_size] = '\0';
		return *this;
		
	}



	// 删除pos位置上的元素，并返回该string的位置

	String& erase(size_t pos, size_t len)//len是删几个
	{
		assert(pos+len<=_size);
		for (int i = pos; i < pos + len; i++)
		{
			if (i + len <= _size) _str[i] = _str[i + len];
			else break;
			
		}
		_size -= len;
		return *this;
	}
private:
	char* _str;
	size_t _size;
	size_t _capacity;
};



String  operator+(const	String& s1, const char* str)
{
	String ret = s1;
	ret += str;
	::swap(ret,ret);
	return ret;
}
ostream& operator<<(ostream& _cout, const String& s)//输出
{
	for (int i = 0; i < s.size(); i++)
	{
		_cout<<s[i];
	}
	return _cout;
}
istream& operator>>(istream& _cin, String& s)//输入
{
	//清楚原始;
	s.clear();
	while (1)
	{
		char ch = getchar();
		if (ch != ' ' && ch != '\n')s += ch;
		else break;
	}
	
	return _cin;
}

